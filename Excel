#encoding: Windows-1252
Add-Type -AssemblyName System.Windows.Forms

# Requires -Module ImportExcel

# Global variables
$global:jsonPath = Join-Path -Path $PSScriptRoot -ChildPath "inflator_database.json"
$global:database = @()
$global:listBox = $null
$global:statusLabel = $null

# Auxiliary Functions
function AplicarEstiloBotao($botao) {
    $botao.BackColor = [System.Drawing.Color]::LightGray
    $botao.ForeColor = [System.Drawing.Color]::Black
    $botao.FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
    $botao.Font = New-Object System.Drawing.Font("Segoe UI", 10)
}

function AplicarEstiloTextBox($textBox) {
    $textBox.Font = New-Object System.Drawing.Font("Segoe UI", 10)
    $textBox.ForeColor = [System.Drawing.Color]::Black
    $textBox.BackColor = [System.Drawing.Color]::White
}

function AplicarEstiloListBox($listBox) {
    $listBox.Font = New-Object System.Drawing.Font("Segoe UI", 10)
    $listBox.ForeColor = [System.Drawing.Color]::Black
    $listBox.BackColor = [System.Drawing.Color]::White
}

function AplicarEstiloJanela($janela) {
    $janela.BackColor = [System.Drawing.Color]::WhiteSmoke
    $janela.Font = New-Object System.Drawing.Font("Segoe UI", 9)
}

function CarregarDatabase {
    $global:database = @()
    if (Test-Path -Path $global:jsonPath -PathType Leaf) {
        try {
            $global:database = [System.IO.File]::ReadAllText($global:jsonPath, [System.Text.Encoding]::UTF8) | 
                ConvertFrom-Json
        } catch {
            Write-Host "Erro ao carregar inflator_database.json: $_"
            $global:statusLabel.Text = "Erro ao carregar banco de dados."
        }
    }
    return $global:database
}

function Save-Database {
    if (-not $global:database) { return }
    try {
        $json = $global:database | ConvertTo-Json -Depth 10 -Compress
        [System.IO.File]::WriteAllText($global:jsonPath, $json, [System.Text.Encoding]::UTF8)
    } catch {
        Write-Host "Erro ao salvar inflator_database.json: $_"
        $global:statusLabel.Text = "Erro ao salvar banco de dados."
    }
}

# Excel Parsing Function
function Parse-InflatorExcel {
    param (
        [Parameter(Mandatory=$true)]
        [string]$ExcelFilePath
    )

    if (-not (Test-Path $ExcelFilePath)) {
        Write-Host "Excel file not found: $ExcelFilePath"
        $global:statusLabel.Text = "Arquivo Excel não encontrado."
        return $null
    }

    try {
        $data = Import-Excel -Path $ExcelFilePath
        $result = @{
            Metadata = @{}
            Tests = @()
            FilePath = $ExcelFilePath
        }

        $result.Metadata = @{
            ProductionOrder = $data[0].'prod. order'
            TestOrder = $data[0].'test order'
            PropLotNumber = $data[0].'prop. lot-number'
            TestDate = $data[0].'test data'
            PropType = $data[0].'prop. type'
            PropMass = $data[0].'prop. mass'
            Tank = $data[0].'TANK 28.3l (PdL)'
        }

        foreach ($row in $data) {
            if ($row.'test No.' -and $row.'inflator No.') {
                $test = @{
                    TestNo = $row.'test No.'
                    InflatorNo = $row.'inflator No.'
                    Temperature = $row.'temp.'
                    pKmax = $row.'pKmax'
                    tpKmax = $row.'tpKmax'
                    Pressures = @{}
                    Additional = @{}
                }

                $pressureKeys = $row.PSObject.Properties.Name | Where-Object { $_ -match '^pK\d+$' }
                foreach ($key in $pressureKeys) {
                    $test.Pressures[$key] = $row.$key
                }

                $additionalKeys = @('pK120', 'pK150', 'pBk', 'tpBk', 'pFt', 'tpFt', 'ttfg', 'Gt', 'tpK1%', 'tpK10%', 'tpK25%', 'tpK50%', 'tpK75%', 'tpK90%', 'pKm2', 'd pK', 'd fso')
                foreach ($key in $additionalKeys) {
                    if ($row.$key -ne $null) {
                        $test.Additional[$key] = $row.$key
                    }
                }

                $result.Tests += $test
            }
        }

        return $result
    } catch {
        Write-Host "Erro ao processar Excel: $_"
        $global:statusLabel.Text = "Erro ao processar arquivo Excel."
        return $null
    }
}

# Function to Add Excel Data to JSON Database
function Add-ToJsonDatabase {
    param (
        [Parameter(Mandatory=$true)]
        [string]$ExcelFilePath
    )

    $newData = Parse-InflatorExcel -ExcelFilePath $ExcelFilePath
    if (-not $newData) { return }

    $existingTestNos = $global:database.Tests.TestNo
    $newTests = $newData.Tests | Where-Object { $_.TestNo -notin $existingTestNos }

    if ($newTests.Count -eq 0) {
        Write-Host "No new tests to add from $ExcelFilePath"
        $global:statusLabel.Text = "Nenhum teste novo adicionado."
        return
    }

    $global:database += @{
        Metadata = $newData.Metadata
        Tests = $newTests
        FilePath = $newData.FilePath
    }

    Save-Database
    $global:statusLabel.Text = "Adicionados $($newTests.Count) novos testes."
}

# Function to Filter Tests
function FiltrarTestes($filtro) {
    $global:listBox.Items.Clear()
    
    if ($filtro.Length -le 2 -or $filtro -eq "Pesquisar") {
        return
    }

    $filtroNormalizado = $filtro.ToLower()
    $isProductionOrder = $filtro -match '^\d{6}$'

    foreach ($entry in $global:database) {
        if ($isProductionOrder -and $entry.Metadata.ProductionOrder -ne $filtro) {
            continue
        }
        foreach ($test in $entry.Tests) {
            $testNo = $test.TestNo.ToLower()
            $inflatorNo = $test.InflatorNo.ToLower()
            $temp = $test.Temperature.ToString().ToLower()
            if ($testNo.Contains($filtroNormalizado) -or 
                $inflatorNo.Contains($filtroNormalizado) -or 
                $temp.Contains($filtroNormalizado) -or 
                ($isProductionOrder -and $entry.Metadata.ProductionOrder -eq $filtro)) {
                $global:listBox.Items.Add("$($test.TestNo) | $($test.InflatorNo) | $($test.Temperature) | $($test.pKmax) | $($test.tpKmax) | $($entry.Metadata.ProductionOrder) | $($entry.FilePath)")
            }
        }
    }
}

function SelecionarArquivoExcel {
    $dialog = New-Object System.Windows.Forms.OpenFileDialog
    $dialog.Filter = "Arquivos Excel (*.xlsx)|*.xlsx"
    $dialog.Title = "Selecione um arquivo Excel"
    if ($dialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
        return $dialog.FileName
    }
    return $null
}

function AbrirArquivo($caminho) {
    if ([string]::IsNullOrWhiteSpace($caminho) -or -not (Test-Path $caminho)) {
        $global:statusLabel.Text = "Arquivo não encontrado."
        return
    }
    try {
        Invoke-Item -Path $caminho
    } catch {
        Write-Host "Erro ao abrir arquivo: $_"
        $global:statusLabel.Text = "Erro ao abrir arquivo."
    }
}

### GUI PRINCIPAL
$form = New-Object Windows.Forms.Form
$form.Text = "Catálogo de Testes de Inflatores"
$form.Size = New-Object Drawing.Size(800, 500)
$form.MinimumSize = New-Object Drawing.Size(600, 400)
$form.StartPosition = "CenterScreen"
AplicarEstiloJanela $form

# TextBox de pesquisa
$textBoxPesquisa = New-Object Windows.Forms.TextBox
$textBoxPesquisa.Location = New-Object Drawing.Point(10, 10)
$textBoxPesquisa.Width = 760
$textBoxPesquisa.Height = 30
$textBoxPesquisa.Anchor = 'Top, Left, Right'
AplicarEstiloTextBox $textBoxPesquisa
$textBoxPesquisa.Text = "Pesquisar (Test No., Inflator No., Temp., Ordem 6 dígitos)"
$textBoxPesquisa.ForeColor = [System.Drawing.Color]::Gray
$form.Controls.Add($textBoxPesquisa)

$textBoxPesquisa.Add_GotFocus({
    if ($textBoxPesquisa.Text -eq "Pesquisar (Test No., Inflator No., Temp., Ordem 6 dígitos)") {
        $textBoxPesquisa.Text = ""
        $textBoxPesquisa.ForeColor = [System.Drawing.Color]::Black
    }
})

$textBoxPesquisa.Add_LostFocus({
    if ($textBoxPesquisa.Text -eq "") {
        $textBoxPesquisa.Text = "Pesquisar (Test No., Inflator No., Temp., Ordem 6 dígitos)"
        $textBoxPesquisa.ForeColor = [System.Drawing.Color]::Gray
    }
})

$textBoxPesquisa.Add_TextChanged({
    FiltrarTestes $textBoxPesquisa.Text
})

# ListBox
$listBox = New-Object Windows.Forms.ListBox
$listBox.Location = New-Object Drawing.Point(10, 50)
$listBox.Size = New-Object Drawing.Size(760, 350)
$listBox.Anchor = 'Top, Bottom, Left, Right'
AplicarEstiloListBox $listBox
$listBox.HorizontalScrollbar = $true
$listBox.Add_DoubleClick({
    foreach ($selectedItem in $listBox.SelectedItems) {
        if ($selectedItem -and $selectedItem -match '\|\s*([^\|]+)$') {
            AbrirArquivo $matches[1]
        }
    }
})
$listBox.Add_KeyDown({
    if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Enter) {
        foreach ($selectedItem in $listBox.SelectedItems) {
            if ($selectedItem -and $selectedItem -match '\|\s*([^\|]+)$') {
                AbrirArquivo $matches[1]
            }
        }
    }
})
$form.Controls.Add($listBox)
$global:listBox = $listBox

# Botões
$btnAdicionar = New-Object Windows.Forms.Button
$btnAdicionar.Text = "Adicionar Excel"
$btnAdicionar.Size = New-Object Drawing.Size(120, 30)
$btnAdicionar.Location = New-Object Drawing.Point(10, 410)
$btnAdicionar.Anchor = 'Bottom, Left'
AplicarEstiloBotao $btnAdicionar
$btnAdicionar.Add_Click({
    $excelFile = SelecionarArquivoExcel
    if ($excelFile) {
        Add-ToJsonDatabase -ExcelFilePath $excelFile
        FiltrarTestes $textBoxPesquisa.Text
    }
})
$form.Controls.Add($btnAdicionar)

$btnSair = New-Object Windows.Forms.Button
$btnSair.Text = "Sair"
$btnSair.Size = New-Object Drawing.Size(120, 30)
$btnSair.Location = New-Object Drawing.Point(650, 410)
$btnSair.Anchor = 'Bottom, Right'
AplicarEstiloBotao $btnSair
$btnSair.Add_Click({ $form.Close() })
$form.Controls.Add($btnSair)

# Status Bar
$statusStrip = New-Object System.Windows.Forms.StatusStrip
$statusStrip.BackColor = [System.Drawing.Color]::WhiteSmoke
$statusStrip.SizingGrip = $false
$statusStrip.Dock = 'Bottom'
$form.Controls.Add($statusStrip)

$statusLabel = New-Object System.Windows.Forms.ToolStripStatusLabel
$statusLabel.Text = "Pronto"
$statusLabel.Spring = $true
$statusStrip.Items.Add($statusLabel)
$global:statusLabel = $statusLabel

# Evento de redimensionamento
$form.Add_Resize({
    $textBoxPesquisa.Width = $form.ClientSize.Width - 20
    $listBox.Width = $form.ClientSize.Width - 20
    $listBox.Height = $form.ClientSize.Height - 100
})

# Initialize
CarregarDatabase
$form.ShowDialog()
