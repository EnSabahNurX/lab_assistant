#encoding: UTF8
Add-Type -AssemblyName PresentationFramework
Add-Type -AssemblyName System.Windows.Forms
Add-Type -Path (Join-Path -Path $PSScriptRoot -ChildPath "System.Data.SQLite.dll")

# Configurações globais
$global:dbPath = Join-Path -Path $PSScriptRoot -ChildPath "FileCatalog.db"
$global:connectionString = "Data Source=$global:dbPath;Version=3;"
$global:documentos = @()
$global:rootFolders = @()
$global:listBox = $null
$global:indexingJob = $null

# Funções Auxiliares (mantidas iguais)
function CriarToolTip($controle, $texto) {
    $toolTip = New-Object System.Windows.Forms.ToolTip
    $toolTip.ToolTipStyle = [System.Windows.Forms.ToolTipStyle]::Standard
    $toolTip.UseFading = $true
    $toolTip.UseAnimation = $true
    $toolTip.IsBalloon = $false
    $toolTip.ShowAlways = $true
    $toolTip.AutoPopDelay = 5000
    $toolTip.InitialDelay = 500
    $toolTip.ReshowDelay = 100
    $toolTip.Font = New-Object System.Drawing.Font("Segoe UI", 8)
    $toolTip.SetToolTip($controle, $texto) | Out-Null
}

function AplicarEstiloBotao($botao) {
    $botao.BackColor = [System.Drawing.Color]::LightGray
    $botao.ForeColor = [System.Drawing.Color]::Black
    $botao.FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
    $botao.FlatAppearance.BorderSize = 1
    $botao.Font = New-Object System.Drawing.Font("Segoe UI", 9)
}

function AplicarEstiloTextBox($textBox) {
    $textBox.Font = New-Object System.Drawing.Font("Segoe UI", 10)
    $textBox.ForeColor = [System.Drawing.Color]::Black
    $textBox.BackColor = [System.Drawing.Color]::White
}

function AplicarEstiloListBox($listBox) {
    $listBox.Font = New-Object System.Drawing.Font("Consolas", 10)
    $listBox.ForeColor = [System.Drawing.Color]::Black
    $listBox.BackColor = [System.Drawing.Color]::White
}

function AplicarEstiloJanela($janela) {
    $janela.BackColor = [System.Drawing.Color]::WhiteSmoke
    $janela.Font = New-Object System.Drawing.Font("Segoe UI", 9)
}

# Funções de Banco de Dados SQLite
function Initialize-Database {
    $conn = New-Object System.Data.SQLite.SQLiteConnection($global:connectionString)
    $conn.Open()
    
    $cmd = $conn.CreateCommand()
    $cmd.CommandText = @"
        CREATE TABLE IF NOT EXISTS RootFolders (
            Id INTEGER PRIMARY KEY AUTOINCREMENT,
            Caminho TEXT NOT NULL
        );
        CREATE TABLE IF NOT EXISTS Documentos (
            Id INTEGER PRIMARY KEY AUTOINCREMENT,
            Nome TEXT NOT NULL,
            Caminho TEXT NOT NULL
        );
        CREATE INDEX IF NOT EXISTS idx_nome ON Documentos (Nome);
        CREATE INDEX IF NOT EXISTS idx_caminho ON Documentos (Caminho);
"@
    $cmd.ExecuteNonQuery()
    $conn.Close()
}

function Execute-SQLiteQuery($query, $parameters = @{}) {
    $conn = New-Object System.Data.SQLite.SQLiteConnection($global:connectionString)
    $conn.Open()
    $cmd = $conn.CreateCommand()
    $cmd.CommandText = $query
    
    foreach ($param in $parameters.GetEnumerator()) {
        $cmd.Parameters.AddWithValue($param.Name, $param.Value) | Out-Null
    }
    
    $result = @()
    $reader = $cmd.ExecuteReader()
    while ($reader.Read()) {
        $row = @{}
        for ($i = 0; $i -lt $reader.FieldCount; $i++) {
            $row[$reader.GetName($i)] = $reader.GetValue($i)
        }
        $result += [PSCustomObject]$row
    }
    $reader.Close()
    $conn.Close()
    return $result
}

function Execute-SQLiteNonQuery($query, $parameters = @{}) {
    $conn = New-Object System.Data.SQLite.SQLiteConnection($global:connectionString)
    $conn.Open()
    $cmd = $conn.CreateCommand()
    $cmd.CommandText = $query
    
    foreach ($param in $parameters.GetEnumerator()) {
        $cmd.Parameters.AddWithValue($param.Name, $param.Value) | Out-Null
    }
    
    $cmd.ExecuteNonQuery()
    $conn.Close()
}

function Load-RootFolders {
    $global:rootFolders = @()
    $result = Execute-SQLiteQuery "SELECT Caminho FROM RootFolders"
    if ($result) {
        $global:rootFolders = $result | ForEach-Object { [PSCustomObject]@{ Caminho = $_.Caminho } }
    }
    return $global:rootFolders
}

function Save-RootFolders {
    Execute-SQLiteNonQuery "DELETE FROM RootFolders"
    foreach ($folder in $global:rootFolders) {
        Execute-SQLiteNonQuery "INSERT INTO RootFolders (Caminho) VALUES (@Caminho)" @{ "@Caminho" = $folder.Caminho }
    }
}

function CarregarDocumentosDoSQL {
    $global:documentos = @()
    $result = Execute-SQLiteQuery "SELECT Nome, Caminho FROM Documentos"
    if ($result) {
        $global:documentos = $result | ForEach-Object { [PSCustomObject]@{ Nome = $_.Nome; Caminho = $_.Caminho } }
    }
    return $global:documentos
}

function Save-Documents($docs) {
    Execute-SQLiteNonQuery "DELETE FROM Documentos"
    $conn = New-Object System.Data.SQLite.SQLiteConnection($global:connectionString)
    $conn.Open()
    $cmd = $conn.CreateCommand()
    $cmd.CommandText = "INSERT INTO Documentos (Nome, Caminho) VALUES (@Nome, @Caminho)"
    $nomeParam = $cmd.Parameters.Add("@Nome", [System.Data.DbType]::String)
    $caminhoParam = $cmd.Parameters.Add("@Caminho", [System.Data.DbType]::String)
    
    foreach ($doc in $docs) {
        $nomeParam.Value = $doc.Nome
        $caminhoParam.Value = $doc.Caminho
        $cmd.ExecuteNonQuery() | Out-Null
    }
    $conn.Close()
}

function IndexarArquivosEmSegundoPlano {
    if ($global:indexingJob -and $global:indexingJob.State -eq "Running") {
        [System.Windows.Forms.MessageBox]::Show("A indexação já está em andamento.", "Aviso")
        return
    }

    $global:indexingJob = Start-Job -ScriptBlock {
        param($rootFolders, $dbPath)
        Add-Type -Path (Join-Path -Path $PSScriptRoot -ChildPath "System.Data.SQLite.dll")
        $connectionString = "Data Source=$dbPath;Version=3;"
        
        $docs = @(
            foreach ($folder in $rootFolders) {
                if (Test-Path $folder.Caminho) {
                    Get-ChildItem -Path $folder.Caminho -Recurse -File -ErrorAction SilentlyContinue |
                        ForEach-Object { [PSCustomObject]@{ Nome = $_.Name; Caminho = $_.FullName } }
                }
            }
        )
        
        $conn = New-Object System.Data.SQLite.SQLiteConnection($connectionString)
        $conn.Open()
        $cmd = $conn.CreateCommand()
        $cmd.CommandText = "DELETE FROM Documentos"
        $cmd.ExecuteNonQuery()
        
        $cmd.CommandText = "INSERT INTO Documentos (Nome, Caminho) VALUES (@Nome, @Caminho)"
        $nomeParam = $cmd.Parameters.Add("@Nome", [System.Data.DbType]::String)
        $caminhoParam = $cmd.Parameters.Add("@Caminho", [System.Data.DbType]::String)
        
        foreach ($doc in $docs) {
            $nomeParam.Value = $doc.Nome
            $caminhoParam.Value = $doc.Caminho
            $cmd.ExecuteNonQuery() | Out-Null
        }
        $conn.Close()
    } -ArgumentList $global:rootFolders, $global:dbPath

    # Timer para verificar quando o job termina
    $timer = New-Object System.Windows.Forms.Timer
    $timer.Interval = 1000 # Verifica a cada 1 segundo
    $timer.Add_Tick({
        if ($global:indexingJob.State -eq "Completed") {
            $timer.Stop()
            Remove-Job -Job $global:indexingJob
            $global:indexingJob = $null
            CarregarDocumentos
            [System.Windows.Forms.MessageBox]::Show("Indexação concluída!", "Sucesso")
        } elseif ($global:indexingJob.State -eq "Failed") {
            $timer.Stop()
            $errorMsg = Receive-Job -Job $global:indexingJob
            Remove-Job -Job $global:indexingJob
            $global:indexingJob = $null
            [System.Windows.Forms.MessageBox]::Show("Erro na indexação: $errorMsg", "Erro")
        }
    })
    $timer.Start()
}

function AbrirArquivo($caminho) {
    if ([string]::IsNullOrWhiteSpace($caminho) -or -not (Test-Path $caminho)) {
        return
    }
    try {
        Invoke-Item -Path $caminho
    } catch {
        Write-Host "Erro ao abrir arquivo: $_"
    }
}

function SelecionarPasta {
    $dialog = New-Object System.Windows.Forms.FolderBrowserDialog
    $dialog.Description = "Selecione uma pasta"
    if ($dialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
        return $dialog.SelectedPath
    }
    return $null
}

function CarregarDocumentos {
    $textBoxPesquisa.Text = ""
    FiltrarDocumentos ""
}

function FiltrarDocumentos($filtro) {
    $global:listBox.Items.Clear()
    if ($filtro -eq "Pesquisar") {
        $filtroNormalizado = ""
    } else {
        $filtroNormalizado = $filtro.ToLower()
    }
    
    $query = "SELECT Nome, Caminho FROM Documentos WHERE LOWER(Nome) LIKE @Filtro OR LOWER(Caminho) LIKE @Filtro"
    $result = Execute-SQLiteQuery -Query $query -Parameters @{ "@Filtro" = "%$filtroNormalizado%" }
    
    foreach ($doc in $result) {
        $global:listBox.Items.Add("$($doc.Nome) | $($doc.Caminho)")
    }
}

function GerirPastasRaiz {
    $janela = New-Object Windows.Forms.Form
    $janela.Text = "Gerir Pastas"
    $janela.Size = New-Object Drawing.Size(500, 400)
    $janela.MinimumSize = New-Object Drawing.Size(400, 300)
    $janela.StartPosition = "CenterScreen"
    AplicarEstiloJanela $janela

    $listPastas = New-Object Windows.Forms.ListBox
    $listPastas.Location = New-Object Drawing.Point(10, 10)
    $listPastas.Anchor = 'Top, Left, Right, Bottom'
    $listPastas.Width = $janela.ClientSize.Width - 20
    $listPastas.Height = 200
    AplicarEstiloListBox $listPastas
    $listPastas.SelectionMode = [System.Windows.Forms.SelectionMode]::MultiExtended
    $janela.Controls.Add($listPastas)

    $btnAdicionar = New-Object Windows.Forms.Button
    $btnAdicionar.Text = "Adicionar Pasta"
    $btnAdicionar.Location = New-Object Drawing.Point(10, 220)
    $btnAdicionar.Font = New-Object Drawing.Font("Arial", 12)
    $btnAdicionar.Width = 140
    $btnAdicionar.Anchor = 'Bottom, Left'
    AplicarEstiloBotao $btnAdicionar
    CriarToolTip $btnAdicionar "Adiciona uma nova pasta na listagem de pastas para catalogar todos os arquivos dentro da pasta pretendida incluindo as subpastas."
    $btnAdicionar.Add_Click({
        $novaPasta = SelecionarPasta
        if ($novaPasta -and -not $listPastas.Items.Contains($novaPasta)) {
            $listPastas.Items.Add($novaPasta)
        }
    })
    $janela.Controls.Add($btnAdicionar)

    $btnRemover = New-Object Windows.Forms.Button
    $btnRemover.Text = "Remover Pasta"
    $btnRemover.Location = New-Object Drawing.Point(160, 220)
    $btnRemover.Font = New-Object Drawing.Font("Arial", 12)
    $btnRemover.Width = 140
    $btnRemover.Anchor = 'Bottom, Left'
    AplicarEstiloBotao $btnRemover
    CriarToolTip $btnRemover "Remove a pasta selecionada da listagem de pastas."
    $btnRemover.Add_Click({
        $selectedItems = @($listPastas.SelectedItems)
        foreach ($sel in $selectedItems) {
            $listPastas.Items.Remove($sel)
        }
    })
    $janela.Controls.Add($btnRemover)

    $btnGuardar = New-Object Windows.Forms.Button
    $btnGuardar.Text = "Guardar"
    $btnGuardar.Location = New-Object Drawing.Point(10, 260)
    $btnGuardar.Font = New-Object Drawing.Font("Arial", 12)
    $btnGuardar.Width = $janela.ClientSize.Width - 20
    $btnGuardar.Anchor = 'Bottom, Left, Right'
    AplicarEstiloBotao $btnGuardar
    CriarToolTip $btnGuardar "Guarda a listagem de pastas e cataloga os arquivos contidos dentro das pastas da listagem incluindo as subpastas."
    $btnGuardar.Add_Click({
        $global:rootFolders = @()
        foreach ($item in $listPastas.Items) {
            $global:rootFolders += [PSCustomObject]@{ Caminho = $item }
        }
        Save-RootFolders
        IndexarArquivosEmSegundoPlano
        $janela.Close()
    })
    $janela.Controls.Add($btnGuardar)

    $janela.Add_Resize({
        $listPastas.Width = $janela.ClientSize.Width - 20
        $btnGuardar.Width = $janela.ClientSize.Width - 20
    })

    $listPastas.Items.Clear()
    $global:rootFolders = Load-RootFolders
    foreach ($pasta in $global:rootFolders) {
        $listPastas.Items.Add($pasta.Caminho)
    }

    $janela.ShowDialog()
}

# GUI PRINCIPAL
$form = New-Object Windows.Forms.Form
$form.Text = "Botica | Catalogo de ficheiros"
$form.Size = New-Object Drawing.Size(800, 520)
$form.MinimumSize = New-Object Drawing.Size(600, 400)
$form.StartPosition = "CenterScreen"
AplicarEstiloJanela $form

$textBoxPesquisa = New-Object Windows.Forms.TextBox
$textBoxPesquisa.Location = New-Object Drawing.Point(10, 10)
$textBoxPesquisa.Width = 760
$textBoxPesquisa.Height = 40
$textBoxPesquisa.Anchor = 'Top, Left, Right'
AplicarEstiloTextBox $textBoxPesquisa
$textBoxPesquisa.Text = "Pesquisar"
$textBoxPesquisa.ForeColor = [System.Drawing.Color]::Gray
$form.Controls.Add($textBoxPesquisa)

$textBoxPesquisa.Add_GotFocus({
    if ($textBoxPesquisa.Text -eq "Pesquisar") {
        $textBoxPesquisa.Text = ""
        $textBoxPesquisa.ForeColor = [System.Drawing.Color]::Black
    }
})

$textBoxPesquisa.Add_LostFocus({
    if ($textBoxPesquisa.Text -eq "") {
        $textBoxPesquisa.Text = "Pesquisar"
        $textBoxPesquisa.ForeColor = [System.Drawing.Color]::Gray
    }
})

$textBoxPesquisa.Add_TextChanged({
    FiltrarDocumentos $textBoxPesquisa.Text
})

$listBox = New-Object Windows.Forms.ListBox
$listBox.Location = New-Object Drawing.Point(10, 55)
$listBox.Size = New-Object Drawing.Size(760, 350)
$listBox.Anchor = 'Top, Bottom, Left, Right'
AplicarEstiloListBox $listBox
$listBox.HorizontalScrollbar = $true
$listBox.SelectionMode = [System.Windows.Forms.SelectionMode]::MultiExtended
$listBox.Add_DoubleClick({
    foreach ($selectedItem in $listBox.SelectedItems) {
        if ($selectedItem -and $selectedItem -match '\|\s*(.+)$') {
            AbrirArquivo $matches[1]
        }
    }
})
$listBox.Add_KeyDown({
    if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Enter) {
        foreach ($selectedItem in $listBox.SelectedItems) {
            if ($selectedItem -and $selectedItem -match '\|\s*(.+)$') {
                AbrirArquivo $matches[1]
            }
        }
    }
})
$form.Controls.Add($listBox)
$global:listBox = $listBox

$btnReindexar = New-Object Windows.Forms.Button
$btnReindexar.Text = "Atualizar"
$btnReindexar.Size = New-Object Drawing.Size(120, 30)
$btnReindexar.Location = New-Object Drawing.Point(10, 420)
$btnReindexar.Anchor = 'Bottom, Left'
AplicarEstiloBotao $btnReindexar
CriarToolTip $btnReindexar "Atualiza lista de arquivos catalogados conforme a listagem de pastas."
$btnReindexar.Add_Click({ IndexarArquivosEmSegundoPlano })
$form.Controls.Add($btnReindexar)

$btnPastas = New-Object Windows.Forms.Button
$btnPastas.Text = "Pastas"
$btnPastas.Size = New-Object Drawing.Size(120, 30)
$btnPastas.Location = New-Object Drawing.Point(140, 420)
$btnPastas.Anchor = 'Bottom, Left'
AplicarEstiloBotao $btnPastas
CriarToolTip $btnPastas "Gerencia a listagem de pastas para catalogar os arquivos de interesse."
$btnPastas.Add_Click({ GerirPastasRaiz })
$form.Controls.Add($btnPastas)

$btnSair = New-Object Windows.Forms.Button
$btnSair.Text = "Sair"
$btnSair.Size = New-Object Drawing.Size(120, 30)
$btnSair.Location = New-Object Drawing.Point(270, 420)
$btnSair.Anchor = 'Bottom, Left'
AplicarEstiloBotao $btnSair
CriarToolTip $btnSair "Fecha o aplicativo."
$btnSair.Add_Click({ $form.Close() })
$form.Controls.Add($btnSair)

$form.Add_Resize({
    $textBoxPesquisa.Width = $form.ClientSize.Width - 20
    $listBox.Width = $form.ClientSize.Width - 20
})

# Inicialização
Initialize-Database
CarregarDocumentos
$form.ShowDialog()
